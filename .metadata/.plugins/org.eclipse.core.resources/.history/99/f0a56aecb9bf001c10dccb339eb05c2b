/**
 * this class used to solve sudoku1
 * @author schinthakunta1
 *
 */
public class sudoku {
	private static final int GRID_SIZE=9;
	public static void main(String[] args) {
		int[][] board= {
				{7,0,2,0,5,0,6,0,0},
				{0,0,0,0,0,3,0,0,0},
				{1,0,0,0,0,9,5,0,0},
				{8,0,0,0,0,0,0,9,0},
				{0,4,3,0,0,0,7,5,0},
				{0,9,0,0,0,0,0,0,8},
				{0,0,9,7,0,0,0,0,5},
				{0,0,0,2,0,0,0,0,0,},
				{0,0,7,0,4,0,2,0,3}
		};
		//method to print the sudoku1
		printBoard(board);
		if(solveBoard(board)) {
			System.out.println("Solved Successfully");
		}
		else {
			System.out.println("Unsolvable Board");
		}
		printBoard(board);
	}
	private static void printBoard(int[][] board) {
		for(int row=0;row<GRID_SIZE;row++) {
			if(row%3==0 && row!=0) {
				System.out.println("=================");
			}
			for(int column=0;column<GRID_SIZE;column++) {
				if(column%3==0 && column!=0) {
					System.out.print("|");
				}
				System.out.print(board[row][column]);
				
			}
			System.out.println("");
		}
	}
	//We check if possible number already in a row
	private static boolean isNumberInRow(int[][] board,int number,int row) {
		for(int i=0;i<GRID_SIZE;i++) {
			if(board[row][i]==number) {
				return true;
			}
		}
		return false;
	}
	//We check if possible number already in a column
		private static boolean isNumberInColumn(int[][] board,int number,int column) {
			for(int i=0;i<GRID_SIZE;i++) {
				if(board[i][column]==number) {
					return true;
				}
			}
			return false;
		}
	//we check if possible number in 2x2 matrix
		private static boolean isNumberInBox(int[][] board,int number,int row,int column) {
			int localBoxRow=row-row%3;
		    int localBoxColumn=column-column%3;
		    
		    for(int i=localBoxRow;i<localBoxRow+3;i++) {
		    	for(int j=localBoxColumn;j<localBoxColumn+3;j++) {
		    		if(board[i][j]==number) {
		    			return true;
		    		}
		    	}
		    }
		    
		    return false;
		}
    //Combined method to check if a possible number is placed in valid position
		private static boolean isValidPlacement(int[][] board,int number,int row,int column) {
			return !isNumberInRow(board,number,row)&&
					!isNumberInColumn(board,number,column) &&
					!isNumberInBox(board,number,row,column);
		}
		//solve a method ,we will use a recursion backtracking algorithm
		private static boolea solveBoard(int[][] board) {
			for(int row=0;row<GRID_SIZE;row++) {
				for(int column=0;column<GRID_SIZE;column++) {
					if(board[row][column]==0) {
						for(int n=1;n<=GRID_SIZE;n++) {
							if(isValidPlacement(board,n,row,column)) {
								board[row][column]=n;
								  if(solveBoard(board)) {
									  return true;
								  }
								  else {
									  board[row][column]=0;
								  }
							}
						}
						return false;
					}
				}
				
			}
			return true;
		}
		
}
		  