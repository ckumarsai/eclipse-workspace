import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.lang.reflect.Array;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.ParseException;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import org.json.simple.parser.JSONParser;

/**
 * This is a class containing methods to do file IO using JSON.
 * 
 * @author Saikumar
 *
 */
public class FileManager {

	static final String DIRECTORY_NAME = "myfiles";
	static final String FILE_EXTENSION = ".txt";

	private String fileName;

	/**
	 * Constructor for creating a new File Manager.
	 * 
	 * @param fileName
	 * @throws
	 */
	public FileManager(String fileName) throws IllegalArgumentException {

		this.fileName = fileName;
//		File dir = new File(DIRECTORY_NAME);
//		
//		try {					
//			dir.mkdirs();										// trying to create a directory
//		} catch (Exception ex) {
//			// do nothing, this fails if the directory already exists.
//		}
//		
//		try {
//			File fileObject = new File(dir, fileName + FILE_EXTENSION);	// trying to create the file in the directory
//			if (fileObject.createNewFile()) {
//				System.out.println("File created successfully.");
//			} else {
//				throw new IllegalArgumentException("This file " + this.fileName + " already exists.");
//			}
//		} catch (Exception ex) {
//			ex.printStackTrace();
//			throw new IllegalArgumentException("This argument " + this.fileName + " is illegal.");
//		}
	}

	/**
	 * This is the helper method to write data into our created file.
	 */

	public void writeJson() {
		JSONObject obj = new JSONObject();
//		obj.put("id:","1");
//		obj.put("name ", "sai kumar");
//		obj.put("age", "23");
//		obj.put("designation", "1");
		JSONArray Jarray = new JSONArray();
		JSONObject Jobj = new JSONObject();
		JSONObject Jobj1 = new JSONObject();
		Jobj1.put("id", 23);
		JSONObject Jobj2 = new JSONObject();
		Jobj2.put("id", 22);
		JSONObject Jobj3 = new JSONObject();
		Jobj3.put("id", 21);

		Jarray.add(Jobj1);
		Jarray.add(Jobj2);
		Jarray.add(Jobj3);

		JSONObject jobjfinal = new JSONObject();
		jobjfinal.put("id's", Jarray);

		obj.put("emp", Jarray);
		// obj.put("hobbies", hobby);

		try (FileWriter file = new FileWriter(fileName)) {
			file.write(obj.toJSONString());
		} catch (IOException e) {
			e.printStackTrace();

		}
		System.out.print(obj);

	}

	/**
	 * This is a helper method for reading the deatils in the createdfile.
	 * 
	 * @throws org.json.simple.parser.ParseException
	 * @throws ParseException
	 * @throws IOException
	 * @throws FileNotFoundException
	 */

	public String readJson() throws org.json.simple.parser.ParseException {
		Object ob;
		try {
			ob = new JSONParser().parse(new FileReader(fileName));

			// typecasting ob to JSONObject
			JSONObject js = (JSONObject) ob;

//	        String firstName = (String) js.get("firstname");
//	        String lastName = (String) js.get("Lastname");
//          String city   =(String) js.get("city");
//	        System.out.println("First name is: " + firstName);
//	        System.out.println("Last name is: " +lastName);
//	        System.out.println("City is:"+city);
			System.out.println();
			// System.out.println(js.toJSONString());
			return js.toJSONString();

		} catch (IOException | org.json.simple.parser.ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * this is the helper method for count the data in the created file
	 * 
	 * @throws org.json.simple.parser.ParseException
	 */

	public void count() throws org.json.simple.parser.ParseException {

		try {
			BufferedReader br = new BufferedReader(new FileReader(fileName));
			String line = null;
			int count = 0;
//			int count1 = 0;

			while ((line = br.readLine()) != null) {
				count = count + line.length();
//				count1 = count1 + getCharLength(line);
				JSONParser parser = new JSONParser();
				JSONObject json = (JSONObject) parser.parse(line);
				JSONArray Filedata = (JSONArray) json.get("emp");
				System.out.println(Filedata);
				System.out.println("array count:" + Filedata.size());
//				for(int i=0;i<Filedata.size();i++) {
//					
//				}

			}

		} catch (IOException e) {
			e.printStackTrace();

		}
	}

//	public int getCharLength(String line) {
//		if(line == null || line.isEmpty()) return 0;
//		char[] chars = line.toCharArray();
//		return chars.length;
//	
//	}
	/**
	 * This is the Helper method to get the data by id
	 * 
	 * @param string
	 * @param search_id
	 * @return
	 * @throws org.json.simple.parser.ParseException
	 * @throws IOException
	 * @throws org.json.simple.parser.ParseException
	 * @throws org.json.simple.parser.ParseException
	 */
	public Object DMLGetDataByID(String fileName, long search_id)
			throws FileNotFoundException, IOException, ParseException, org.json.simple.parser.ParseException {

		JSONParser parser = new JSONParser();

		Object obj = parser.parse(new FileReader(fileName));
		JSONObject jsonObject = (JSONObject) obj;
		JSONArray employeelist = (JSONArray) jsonObject.get("emp");
		JSONObject foundobject = null;
		for (int i = 0; i < employeelist.size(); i++) {
			JSONObject currentJSONObject = (JSONObject) employeelist.get(i);
			long currentJsonObjectID = (long) currentJSONObject.get("id");
			if (search_id == currentJsonObjectID) {
				foundobject = currentJSONObject;
			}
		}
		return foundobject;

	}

	/**
	 * This is the helper method to delete the particular object
	 * 
	 * @param filename
	 * @param id
	 * @throws FileNotFoundException
	 * @throws IOException
	 * @throws org.json.simple.parser.ParseException
	 */
	public void DMLDeleteDataByID(String filename, long id)
			throws FileNotFoundException, IOException, org.json.simple.parser.ParseException {

		JSONParser parser = new JSONParser();

		Object obj = parser.parse(new FileReader(filename));
		JSONObject jsonObject = (JSONObject) obj;
		JSONArray mylist = (JSONArray) jsonObject.remove("emp");
		JSONObject foundobject = null;
		for (int i = 0; i < mylist.size(); i++) {
			JSONObject presentJSONObject = (JSONObject) mylist.remove(i);
			long presentJSONObjectID = (long) presentJSONObject.remove("id");
			if (id == presentJSONObjectID) {
				foundobject = presentJSONObject;
				
			}
		}
		System.out.println(mylist);

//		return foundobject;
		//System.out.println(jsonObject);

	}

}
